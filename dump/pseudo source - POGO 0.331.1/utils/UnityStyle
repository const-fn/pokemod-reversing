const __importDefault = (mod) =>
  mod && mod.__esModule ? mod : { default: mod };
const ditto_1 = __importDefault(require("@pkmd/ditto"));

const colors = {
  white: "#FFFFFF",
  black: "#000000",
  grey: "#808080",
  blue: "#2F7FFF",
  green: "#00B300",
  yellow: "#FFFF00",
  purple: "#800080",
  orange: "#FFA500",
  pkmd: "#dc3545",
  red: "#FF0000",
};

const hextToFloat = {};
class RichText {
  constructor(text) {
    this._text = text;
  }
  get bold() {
    this._bold = true;
    return this;
  }
  size(s) {
    this._size = s;
    return this;
  }
  get italic() {
    this._italic = true;
    return this;
  }
  get boldItalic() {
    return this.bold.italic;
  }
  hex(c) {
    this._color = c;
    return this;
  }
  toString() {
    if (typeof this._text == "undefined") {
      return "";
    }

    const start = `${this._color ? `<color=${this._color}>` : ""}${
      this._size ? `<size=${this._size}>` : ""
    }${this._bold ? "<b>" : ""}${this._italic ? "<i>" : ""}`;

    const close = `${this._italic ? "</i>" : ""}${this._bold ? "</b>" : ""}${
      this._size ? "</size>" : ""
    }${this._color ? "</color>" : ""}`;

    return start + this._text + close;
  }
}
export { RichText };

Object.keys(colors).forEach((c) => {
  Object.defineProperty(RichText.prototype, c, {
    get() {
      this._color = colors[c];
      return this;
    },
  });
});

let color;
const toUnityColor = (param, alpha = 1) => {
  let _colors$param;

  if (!color) {
    ditto_1.default.use("UnityEngine.Color");
  }

  const key = param + alpha;
  if (hextToFloat[key]) {
    return color.$new(...hextToFloat[key]);
  }
  param = null == (_colors$param = colors[param]) ? param : _colors$param;
  const r = parseInt(param.substring(1, 3), 16) / 255;
  const g = parseInt(param.substring(3, 5), 16) / 255;
  const b = parseInt(param.substring(5, 7), 16) / 255;
  hextToFloat[key] = [r, g, b, alpha];
  return color.$new(...hextToFloat[key]);
};
export { toUnityColor };
