(function (setImmediate, clearImmediate) {
  (() => {
    const nextTick = require("process/browser.js").nextTick;
    const apply = Function.prototype.apply;
    const slice = Array.prototype.slice;
    const immediateIds = {};
    let nextImmediateId = 0;

    // DOM APIs, for completeness

    exports.setTimeout = function (...args) {
      return new Timeout(apply.call(setTimeout, window, args), clearTimeout);
    };
    exports.setInterval = function (...args) {
      return new Timeout(apply.call(setInterval, window, args), clearInterval);
    };
    exports.clearTimeout = exports.clearInterval = (timeout) => {
      timeout.close();
    };

    class Timeout {
      constructor(id, clearFn) {
        this._id = id;
        this._clearFn = clearFn;
      }

      close() {
        this._clearFn.call(window, this._id);
      }
    }

    Timeout.prototype.unref = Timeout.prototype.ref = () => {};

    // Does not start the time, just sets up the members needed.
    exports.enroll = (item, msecs) => {
      clearTimeout(item._idleTimeoutId);
      item._idleTimeout = msecs;
    };

    exports.unenroll = (item) => {
      clearTimeout(item._idleTimeoutId);
      item._idleTimeout = -1;
    };

    exports._unrefActive = exports.active = (item) => {
      clearTimeout(item._idleTimeoutId);

      const item_idleTimeout = item._idleTimeout;
      if (item_idleTimeout >= 0) {
        item._idleTimeoutId = setTimeout(function onTimeout() {
          if (item._onTimeout) {
            item._onTimeout();
          }
        }, item_idleTimeout);
      }
    };

    // That's not how node.js implements it but the exposed api is the same.
    exports.setImmediate =
      typeof setImmediate === "function"
        ? setImmediate
        : function (fn) {
            const id = nextImmediateId++;
            const args =
              arguments.length < 2 ? false : slice.call(arguments, 1);

            immediateIds[id] = true;

            nextTick(function onNextTick() {
              if (immediateIds[id]) {
                // fn.call() is faster so we optimize for the common use-case
                // @see http://jsperf.com/call-apply-segu
                if (args) {
                  fn(...args);
                } else {
                  fn.call(null);
                }
                // Prevent ids from leaking
                exports.clearImmediate(id);
              }
            });

            return id;
          };

    exports.clearImmediate =
      typeof clearImmediate === "function"
        ? clearImmediate
        : (id) => {
            delete immediateIds[id];
          };
  }).call(this);
}).call(this, require("timers").setImmediate, require("timers").clearImmediate);
