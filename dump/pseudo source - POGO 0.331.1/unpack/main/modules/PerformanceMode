import PogoUtils_1 from "../utils/PogoUtils";
const __importDefault = (mod) =>
  mod && mod.__esModule ? mod : { default: mod };
const ditto_1 = __importDefault(require("@pkmd/ditto"));
const ModuleBase_1 = __importDefault(require("../utils/ModuleBase"));
const PersistentPrefs_1 = __importDefault(require("../utils/PersistentPrefs"));
const ITEM_TROY_DISK = 501;
const ITEM_TROY_DISK_GLACIAL = 502;
const ITEM_TROY_DISK_MOSSY = 503;
const ITEM_TROY_DISK_MAGNETIC = 504;
const ITEM_TROY_DISK_RAINY = 505;
const ITEM_TROY_DISK_SPARKLY = 506;
class PerformanceMode extends ModuleBase_1.default {
  constructor() {
    super();
    this.isInit = false;
    this._Color = ditto_1.default.use("UnityEngine.Color");
    this._UnityObject = ditto_1.default.use("UnityEngine.Object");
    this._Text = ditto_1.default.use("UnityEngine.UI.Text");
    this._UIToggleGraphics = ditto_1.default.use("UIToggleGraphics");
    this.poiShrink = true;
  }
  init() {
    super.init();
    const self = this;
    const Texture = ditto_1.default.use("UnityEngine.Texture");

    Texture.set_filterMode.attach({
      onEnter(args) {
        args[0] = 0;
      },
    });

    Texture.set_anisoLevel.attach({
      onEnter(args) {
        args[0] = 0;
      },
    });

    const WeatherService = ditto_1.default.use(
      "Niantic.Holoholo.Map.WeatherService"
    );

    WeatherService.get_CurrentSnowPercentage.attach({
      onLeave() {
        return 0;
      },
    });

    WeatherService.get_CurrentRainPercentage.attach({
      onLeave() {
        return 0;
      },
    });

    WeatherService.get_CurrentCloudPercentage.attach({
      onLeave() {
        return 0;
      },
    });

    WeatherService.get_CurrentFogPercentage.attach({
      onLeave() {
        return 0;
      },
    });

    ditto_1.default
      .use("Niantic.Holoholo.Map.SkyAssetService")
      .get_IsSkyOverridden.replace(() => false);

    info(color.yellow("Disabling Vista Graphics PM"));
    const EnvironmentDataService = ditto_1.default.use(
      "EnvironmentDataService"
    );

    EnvironmentDataService.get_IsVistaEnabled.replace(() => false);

    EnvironmentDataService.get_IsVistaEncounterEnabled.replace(() => false);

    EnvironmentDataService.get_IsVistaBattleEnabled.replace(() => false);

    EnvironmentDataService.get_IsVistaMapEnabled.replace(() => false);

    ditto_1.default
      .use("Niantic.Holoholo.Items.TroyDisk")
      .Refresh.replace(function (pokemonFortProto) {
        if (this.hostPokestop) {
          const lure = this.get_ItemId();
          if (lure && lure != ITEM_TROY_DISK_SPARKLY) {
            const materialSettings =
              this.hostPokestop.materialSettings[
                this.hostPokestop.displayedMaterial
              ];

            lure === ITEM_TROY_DISK
              ? (materialSettings.DiffuseColor2 = self._Color.$new(
                  0.91,
                  0.37,
                  0.49,
                  1
                ))
              : lure === ITEM_TROY_DISK_GLACIAL
              ? (materialSettings.DiffuseColor2 = self._Color.$new(
                  0.12,
                  0.71,
                  0.66,
                  1
                ))
              : lure === ITEM_TROY_DISK_MAGNETIC
              ? (materialSettings.DiffuseColor2 = self._Color.$new(
                  0.9,
                  0.87,
                  0.57,
                  1
                ))
              : lure === ITEM_TROY_DISK_MOSSY
              ? (materialSettings.DiffuseColor2 = self._Color.$new(
                  0.47,
                  0.89,
                  0.41,
                  1
                ))
              : lure === ITEM_TROY_DISK_RAINY
              ? (materialSettings.DiffuseColor2 = self._Color.$new(
                  0.58,
                  0.65,
                  0.64,
                  1
                ))
              : undefined;

            this.hostPokestop.ApplyMaterial(materialSettings);
          }
          this.Refresh(pokemonFortProto);
        }
      });

    ditto_1.default
      .use("Niantic.Holoholo.Items.TroyDiskEffect")
      .Initialize.replace(function (mapPokestop) {
        this.Initialize(mapPokestop);

        if (null != this) {
          try {
            this.Expire();
          } catch (e) {}
        }
      });

    ditto_1.default
      .use("Niantic.Holoholo.ARPhoto.AngledGradientShadow")
      .Initialize.replace(() => {});

    ditto_1.default.use("Niantic.Holoholo.Buddy.MapBuddy").PlayAnim.attach({
      onLeave() {
        this.base.followerPlayPokemon.set_ScaleFactor(0.5);
      },
    });

    ditto_1.default
      .use("MapDisplaySettingsProto")
      ["pb::Niantic.Protobuf.IBufferMessage.InternalMergeFrom"].attach({
        onLeave() {
          this.$fields.forEach((field) => {
            if (!field.modifiers.includes("const")) {
              if (field.type.name == "bool") {
                this[field.fieldName] = false;
              } else if (field.type.name == "string") {
                this[field.fieldName] = "";
              }
            }
          });
        },
      });

    ditto_1.default
      .use("Niantic.Holoholo.Map.MapPaletteService")
      .add_PaletteUpdated.replace(() => {});

    ditto_1.default
      .use("Niantic.Holoholo.Map.MapPaletteService")
      .Initialize.attach({
        onLeave() {
          this.OnDestroy();

          ["get_fog", "set_fog"].forEach((method) => {
            const listener = ditto_1.default
              .use("UnityEngine.RenderSettings")
              [method].attach({
                onEnter(args) {
                  if (args[0] === false) {
                    listener.detach();
                  }

                  args[0] = false;
                },
                onLeave(retval) {
                  return retval !== true && void listener.detach();
                },
              });
          });
        },
      });

    ditto_1.default.use("Skydome").Initialize.attach({
      onLeave() {
        this.cloudRenderers = [];
        this.skyRenderer = null;
        this.daySkyTexture = null;
        this.dayHorizonTexture = null;
        this.nightSkyTexture = null;
        this.nightHorizonTexture = null;
        this.paletteUpdateInterval = 10;
        this.defaultFogDistanceEnd = 0;
        this.lowMemoryFogDistanceEnd = 0;
        this.minFogStartEndDistance = 0;
        this.minFogEnd = 0;
      },
    });

    ditto_1.default
      .use("DisplayWeatherProto")
      ["pb::Niantic.Protobuf.IBufferMessage.InternalMergeFrom"].attach({
        onLeave() {
          this.cloudLevel_ = 0;
          this.rainLevel_ = 0;
          this.windLevel_ = 0;
          this.snowLevel_ = 0;
          this.fogLevel_ = 0;
          this.specialEffectLevel_ = 0;
        },
      });

    this.poiShrink = PersistentPrefs_1.default.get("poi_shrink", true);

    if (this.poiShrink) {
      const Vector3 = ditto_1.default.use("UnityEngine.Vector3");

      ditto_1.default.use("MapPokestop").UpdateData.overloads.forEach((o) => {
        o.attach({
          onLeave() {
            const iscd = this.get_IsCoolingDown();
            if (!iscd) {
              const PoiTransform = this.base.get_MapPlaceTransform();

              if (PoiTransform.get_localScale().x < 1) {
                PoiTransform.set_localScale(Vector3.$new(1, 1, 1));
              }
            }
          },
        });
      });

      ditto_1.default.use("MapPokestop").SetCooldownTime.attach({
        onEnter() {
          const PoiTransform = this.base.get_MapPlaceTransform();

          if (PoiTransform.get_localScale().x == 1) {
            PoiTransform.set_localScale(Vector3.$new(0.05, 0.05, 0.05));
          }
        },
      });

      ditto_1.default
        .use("Niantic.Holoholo.Gym.MapGym")
        .UpdateData.overloads.forEach((overload) => {
          overload.attach({
            onLeave() {
              const iscd = this.get_IsCoolingDown();
              if (!iscd) {
                const PoiTransform = this.base.get_MapPlaceTransform();

                if (PoiTransform.get_localScale().x < 1) {
                  PoiTransform.set_localScale(Vector3.$new(1, 1, 1));
                }
              }
            },
          });
        });

      ditto_1.default
        .use("Niantic.Holoholo.Gym.MapGym")
        .SetCooldownTime.attach({
          onEnter() {
            const PoiTransform = this.base.get_MapPlaceTransform();

            if (PoiTransform.get_localScale().x == 1) {
              PoiTransform.set_localScale(Vector3.$new(0.3, 0.3, 0.3));
            }
          },
        });
    }

    PogoUtils_1.PogoUtils.toggles.addToggleToGroup("advanced_settings", {
      id: "advanced_poiShrink",
      name: "ui.advancedSettings.poiShrinkName",
      value: this.poiShrink,
      description: "ui.advancedSettings.poiShrinkTip",
      callback: (toggle) => {
        this.poiShrink = toggle.value;
        PersistentPrefs_1.default.set("poi_shrink", toggle.value);
      },
    });
  }
}
export default PerformanceMode;
